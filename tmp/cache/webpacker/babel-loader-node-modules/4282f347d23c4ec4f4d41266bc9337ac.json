{"ast":null,"code":"var _jsxFileName = \"/Users/martsofi/test/app/javascript/components/synths/PolySynth.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport Tone from 'tone';\nimport PlaySwitch from '../PlaySwitch';\nimport ToggleSwitch from '../ToggleSwitch';\nimport Slider from '../Slider';\nimport Knob from '../Knob'; // import ButtonSet from '../ButtonSet'\n\nvar PolySynth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PolySynth, _React$Component);\n\n  function PolySynth(props) {\n    var _this;\n\n    _classCallCheck(this, PolySynth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PolySynth).call(this, props));\n\n    _.bindAll(_assertThisInitialized(_this), 'handleValueChange');\n\n    return _this;\n  }\n\n  _createClass(PolySynth, [{\n    key: \"handleValueChange\",\n    value: function handleValueChange(name, property, value) {\n      var changeSynthValue = this.props.changeSynthValue;\n      changeSynthValue(name, property, value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          synth = _this$props.synth,\n          on = _this$props.on,\n          togglePlay = _this$props.togglePlay; // const { attack, decay, sustain, release } = instrument.envelope\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"// \", React.createElement(ToggleSwitch, {\n        value: \"Synth\",\n        current: on,\n        handleClick: togglePlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(PlaySwitch, {\n        name: \"play\",\n        value: \"Synth\",\n        current: on,\n        handleClick: togglePlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"controlsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"controlsRow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PolySynth;\n}(React.Component);\n\nexport { PolySynth as default };","map":{"version":3,"sources":["/Users/martsofi/test/app/javascript/components/synths/PolySynth.jsx"],"names":["_","React","Tone","PlaySwitch","ToggleSwitch","Slider","Knob","PolySynth","props","bindAll","name","property","value","changeSynthValue","synth","on","togglePlay","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB,C,CACA;;IAEqBC,S;;;;;AACnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AACAR,IAAAA,CAAC,CAACS,OAAF,gCAAgB,mBAAhB;;AAFiB;AAGlB;;;;sCAEiBC,I,EAAMC,Q,EAAUC,K,EAAO;AAAA,UAC/BC,gBAD+B,GACV,KAAKL,KADK,CAC/BK,gBAD+B;AAEvCA,MAAAA,gBAAgB,CAACH,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,CAAhB;AACD;;;6BAEQ;AAAA,wBAC2B,KAAKJ,KADhC;AAAA,UACCM,KADD,eACCA,KADD;AAAA,UACQC,EADR,eACQA,EADR;AAAA,UACYC,UADZ,eACYA,UADZ,EAEP;;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACK,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAC,OAApB;AAA4B,QAAA,OAAO,EAAED,EAArC;AAAyC,QAAA,WAAW,EAAEC,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,EAEE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,OAAO,EAAED,EAHX;AAIE,QAAA,WAAW,EAAEC,UAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAQE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CARF,CADF;AAcD;;;;EA7BoCf,KAAK,CAACgB,S;;SAAxBV,S","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport Tone from 'tone'\n\nimport PlaySwitch from '../PlaySwitch'\nimport ToggleSwitch from '../ToggleSwitch'\nimport Slider from '../Slider'\nimport Knob from '../Knob'\n// import ButtonSet from '../ButtonSet'\n\nexport default class PolySynth extends React.Component {\n  constructor(props) {\n    super(props)\n    _.bindAll(this, 'handleValueChange')\n  }\n\n  handleValueChange(name, property, value) {\n    const { changeSynthValue } = this.props\n    changeSynthValue(name, property, value)\n  }\n\n  render() {\n    const { synth, on, togglePlay } = this.props\n    // const { attack, decay, sustain, release } = instrument.envelope\n\n    return (\n      <div>\n        // <ToggleSwitch value=\"Synth\" current={on} handleClick={togglePlay} />\n        <PlaySwitch\n          name=\"play\"\n          value=\"Synth\"\n          current={on}\n          handleClick={togglePlay}\n        />\n        <div className=\"controlsContainer\">\n          <div className=\"controlsRow\"></div>\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}