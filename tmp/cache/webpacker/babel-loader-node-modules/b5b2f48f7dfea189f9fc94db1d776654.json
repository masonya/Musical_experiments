{"ast":null,"code":"import Tone from 'tone';\nexport default function tune2() {\n  var autoFilter = new Tone.AutoFilter({\n    frequency: 1,\n    type: 'sine',\n    depth: 1,\n    baseFrequency: 200,\n    octaves: 2.6,\n    filter: {\n      type: 'lowpass',\n      rolloff: -12,\n      Q: 1\n    }\n  }).toMaster();\n  var autoPanner = new Tone.AutoPanner({\n    frequency: 1,\n    type: 'sine',\n    depth: 1\n  }).toMaster();\n  var autoWah = new Tone.AutoWah({\n    baseFrequency: 100,\n    octaves: 6,\n    sensitivity: 0,\n    Q: 2,\n    gain: 2,\n    follower: {\n      attack: 0.3,\n      release: 0.5\n    }\n  }).toMaster();\n  var bitCrusher = new Tone.BitCrusher({\n    bits: 4\n  }).toMaster();\n  var chebyshev = new Tone.Chebyshev({\n    order: 50,\n    oversample: 'none'\n  }).toMaster();\n  var chorus = new Tone.Chorus({\n    frequency: 1.5,\n    delayTime: 3.5,\n    depth: 0.7,\n    type: 'sine',\n    spread: 180\n  }).toMaster();\n  var convolver = new Tone.Convolver({\n    onload: Tone.noOp,\n    normalize: true\n  }).toMaster();\n  var distortion = new Tone.Distortion({\n    distortion: 0.4,\n    oversample: 'none'\n  }).toMaster();\n  var effect = new Tone.Effect({\n    wet: 1\n  }).toMaster();\n  var feedbackDelay = new Tone.FeedbackDelay({\n    delayTime: '4n',\n    maxDelay: 0.8\n  }).toMaster();\n  var feedbackEffect = new Tone.FeedbackEffect({\n    feedback: 0.125\n  }).toMaster();\n  var freeverb = new Tone.Freeverb({\n    roomSize: 0.7,\n    dampening: 3000\n  }).toMaster();\n  var jcReverb = new Tone.JCReverb({\n    roomSize: 0.5\n  }).toMaster(); // MidSideEffect ???\n\n  var phaser = new Tone.Phaser({\n    frequency: 0.5,\n    octaves: 3,\n    stages: 10,\n    Q: 10,\n    baseFrequency: 350\n  }).toMaster();\n  var pingPongDelay = new Tone.PingPongDelay({\n    delayTime: 0.25,\n    maxDelayTime: 1\n  }).toMaster();\n  var pitchShift = new Tone.PitchShift({\n    pitch: 0,\n    windowSize: 0.1,\n    delayTime: 0,\n    feedback: 0\n  }).toMaster();\n  var reverb = new Tone.Reverb({\n    decay: 1.5,\n    preDelay: 0.01\n  }).toMaster(); // StereoEffect ???\n  // StereoFeedbackEffect ???\n\n  var stereoWidener = new Tone.StereoWidener({\n    width: 0.5\n  }).toMaster(); // StereoXFeedbackEffect ???\n\n  var tremolo = new Tone.Tremolo({\n    frequency: 10,\n    type: 'sine',\n    depth: 0.5,\n    spread: 180\n  }).toMaster();\n  var vibrato = new Tone.Vibrato({\n    maxDelay: 0.005,\n    frequency: 5,\n    depth: 0.1,\n    type: 'sine'\n  }).toMaster();\n}","map":{"version":3,"sources":["/Users/martsofi/DZmusic/app/javascript/components/tunes/tune2.js"],"names":["Tone","tune2","autoFilter","AutoFilter","frequency","type","depth","baseFrequency","octaves","filter","rolloff","Q","toMaster","autoPanner","AutoPanner","autoWah","AutoWah","sensitivity","gain","follower","attack","release","bitCrusher","BitCrusher","bits","chebyshev","Chebyshev","order","oversample","chorus","Chorus","delayTime","spread","convolver","Convolver","onload","noOp","normalize","distortion","Distortion","effect","Effect","wet","feedbackDelay","FeedbackDelay","maxDelay","feedbackEffect","FeedbackEffect","feedback","freeverb","Freeverb","roomSize","dampening","jcReverb","JCReverb","phaser","Phaser","stages","pingPongDelay","PingPongDelay","maxDelayTime","pitchShift","PitchShift","pitch","windowSize","reverb","Reverb","decay","preDelay","stereoWidener","StereoWidener","width","tremolo","Tremolo","vibrato","Vibrato"],"mappings":"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","sourcesContent":["import Tone from 'tone'\n\nexport default function tune2() {\n  let autoFilter = new Tone.AutoFilter({\n    frequency: 1,\n    type: 'sine',\n    depth: 1,\n    baseFrequency: 200,\n    octaves: 2.6,\n    filter: {\n      type: 'lowpass',\n      rolloff: -12,\n      Q: 1\n    }\n  }).toMaster()\n\n  let autoPanner = new Tone.AutoPanner({\n    frequency: 1,\n    type: 'sine',\n    depth: 1\n  }).toMaster()\n\n  let autoWah = new Tone.AutoWah({\n    baseFrequency: 100,\n    octaves: 6,\n    sensitivity: 0,\n    Q: 2,\n    gain: 2,\n    follower: {\n      attack: 0.3,\n      release: 0.5\n    }\n  }).toMaster()\n\n  let bitCrusher = new Tone.BitCrusher({\n    bits: 4\n  }).toMaster()\n\n  let chebyshev = new Tone.Chebyshev({\n    order: 50,\n    oversample: 'none'\n  }).toMaster()\n\n  let chorus = new Tone.Chorus({\n    frequency: 1.5,\n    delayTime: 3.5,\n    depth: 0.7,\n    type: 'sine',\n    spread: 180\n  }).toMaster()\n\n  let convolver = new Tone.Convolver({\n    onload: Tone.noOp,\n    normalize: true\n  }).toMaster()\n\n  let distortion = new Tone.Distortion({\n    distortion: 0.4,\n    oversample: 'none'\n  }).toMaster()\n\n  let effect = new Tone.Effect({\n    wet: 1\n  }).toMaster()\n\n  var feedbackDelay = new Tone.FeedbackDelay({\n    delayTime: '4n',\n    maxDelay: 0.8\n  }).toMaster()\n\n  var feedbackEffect = new Tone.FeedbackEffect({\n    feedback: 0.125\n  }).toMaster()\n\n  var freeverb = new Tone.Freeverb({\n    roomSize: 0.7,\n    dampening: 3000\n  }).toMaster()\n\n  var jcReverb = new Tone.JCReverb({\n    roomSize: 0.5\n  }).toMaster()\n\n  // MidSideEffect ???\n\n  let phaser = new Tone.Phaser({\n    frequency: 0.5,\n    octaves: 3,\n    stages: 10,\n    Q: 10,\n    baseFrequency: 350\n  }).toMaster()\n\n  let pingPongDelay = new Tone.PingPongDelay({\n    delayTime: 0.25,\n    maxDelayTime: 1\n  }).toMaster()\n\n  let pitchShift = new Tone.PitchShift({\n    pitch: 0,\n    windowSize: 0.1,\n    delayTime: 0,\n    feedback: 0\n  }).toMaster()\n\n  let reverb = new Tone.Reverb({\n    decay: 1.5,\n    preDelay: 0.01\n  }).toMaster()\n\n  // StereoEffect ???\n  // StereoFeedbackEffect ???\n\n  let stereoWidener = new Tone.StereoWidener({\n    width: 0.5\n  }).toMaster()\n\n  // StereoXFeedbackEffect ???\n\n  let tremolo = new Tone.Tremolo({\n    frequency: 10,\n    type: 'sine',\n    depth: 0.5,\n    spread: 180\n  }).toMaster()\n\n  let vibrato = new Tone.Vibrato({\n    maxDelay: 0.005,\n    frequency: 5,\n    depth: 0.1,\n    type: 'sine'\n  }).toMaster()\n}\n"]},"metadata":{},"sourceType":"module"}