{"ast":null,"code":"// Tone.Synth is a basic synthesizer with a single oscillator\nvar synth = new Tone.Synth(); // Set the tone to sine\n\nsynth.oscillator.type = 'sine'; // connect it to the master output (your speakers)\n\nsynth.toMaster();\nvar piano = document.getElementById('piano');\npiano.addEventListener('mousedown', function (e) {\n  // fires off a note continously until trigger is released\n  synth.triggerAttack(e.target.dataset.note);\n});\npiano.addEventListener('mouseup', function (e) {\n  // stops the trigger\n  synth.triggerRelease();\n}); // handles keyboard events\n\ndocument.addEventListener('keydown', function (e) {\n  // e object has the key property to tell which key was pressed\n  switch (e.key) {\n    case 'd':\n      return synth.triggerAttack('C4');\n\n    case 'r':\n      return synth.triggerAttack('C#4');\n\n    case 'f':\n      return synth.triggerAttack('D4');\n\n    case 't':\n      return synth.triggerAttack('D#4');\n\n    case 'g':\n      return synth.triggerAttack('E4');\n\n    case 'h':\n      return synth.triggerAttack('F4');\n\n    case 'u':\n      return synth.triggerAttack('F#4');\n\n    case 'j':\n      return synth.triggerAttack('G4');\n\n    case 'i':\n      return synth.triggerAttack('G#4');\n\n    case 'k':\n      return synth.triggerAttack('A4');\n\n    case 'o':\n      return synth.triggerAttack('A#4');\n\n    case 'l':\n      return synth.triggerAttack('B4');\n\n    default:\n      return;\n  }\n}); // when the key is released, audio is released as well\n\ndocument.addEventListener('keyup', function (e) {\n  switch (e.key) {\n    case 'd':\n    case 'r':\n    case 'f':\n    case 't':\n    case 'g':\n    case 'h':\n    case 'u':\n    case 'j':\n    case 'i':\n    case 'k':\n    case 'o':\n    case 'l':\n      synth.triggerRelease();\n  }\n});","map":{"version":3,"sources":["/Users/martsofi/test/app/javascript/tunes/piano.js"],"names":["synth","Tone","Synth","oscillator","type","toMaster","piano","document","getElementById","addEventListener","e","triggerAttack","target","dataset","note","triggerRelease","key"],"mappings":"AAAA;AACA,IAAMA,KAAK,GAAG,IAAIC,IAAI,CAACC,KAAT,EAAd,C,CACA;;AACAF,KAAK,CAACG,UAAN,CAAiBC,IAAjB,GAAwB,MAAxB,C,CACA;;AACAJ,KAAK,CAACK,QAAN;AAEA,IAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAd;AAEAF,KAAK,CAACG,gBAAN,CAAuB,WAAvB,EAAoC,UAAAC,CAAC,EAAI;AACvC;AACAV,EAAAA,KAAK,CAACW,aAAN,CAAoBD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBC,IAArC;AACD,CAHD;AAKAR,KAAK,CAACG,gBAAN,CAAuB,SAAvB,EAAkC,UAAAC,CAAC,EAAI;AACrC;AACAV,EAAAA,KAAK,CAACe,cAAN;AACD,CAHD,E,CAKA;;AACAR,QAAQ,CAACE,gBAAT,CAA0B,SAA1B,EAAqC,UAAAC,CAAC,EAAI;AACxC;AACA,UAAQA,CAAC,CAACM,GAAV;AACE,SAAK,GAAL;AACE,aAAOhB,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,KAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,KAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,KAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,KAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,KAApB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOX,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAP;;AACF;AACE;AA1BJ;AA4BD,CA9BD,E,CA+BA;;AACAJ,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAmC,UAAAC,CAAC,EAAI;AACtC,UAAQA,CAAC,CAACM,GAAV;AACE,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACEhB,MAAAA,KAAK,CAACe,cAAN;AAbJ;AAeD,CAhBD","sourcesContent":["// Tone.Synth is a basic synthesizer with a single oscillator\nconst synth = new Tone.Synth()\n// Set the tone to sine\nsynth.oscillator.type = 'sine'\n// connect it to the master output (your speakers)\nsynth.toMaster()\n\nconst piano = document.getElementById('piano')\n\npiano.addEventListener('mousedown', e => {\n  // fires off a note continously until trigger is released\n  synth.triggerAttack(e.target.dataset.note)\n})\n\npiano.addEventListener('mouseup', e => {\n  // stops the trigger\n  synth.triggerRelease()\n})\n\n// handles keyboard events\ndocument.addEventListener('keydown', e => {\n  // e object has the key property to tell which key was pressed\n  switch (e.key) {\n    case 'd':\n      return synth.triggerAttack('C4')\n    case 'r':\n      return synth.triggerAttack('C#4')\n    case 'f':\n      return synth.triggerAttack('D4')\n    case 't':\n      return synth.triggerAttack('D#4')\n    case 'g':\n      return synth.triggerAttack('E4')\n    case 'h':\n      return synth.triggerAttack('F4')\n    case 'u':\n      return synth.triggerAttack('F#4')\n    case 'j':\n      return synth.triggerAttack('G4')\n    case 'i':\n      return synth.triggerAttack('G#4')\n    case 'k':\n      return synth.triggerAttack('A4')\n    case 'o':\n      return synth.triggerAttack('A#4')\n    case 'l':\n      return synth.triggerAttack('B4')\n    default:\n      return\n  }\n})\n// when the key is released, audio is released as well\ndocument.addEventListener('keyup', e => {\n  switch (e.key) {\n    case 'd':\n    case 'r':\n    case 'f':\n    case 't':\n    case 'g':\n    case 'h':\n    case 'u':\n    case 'j':\n    case 'i':\n    case 'k':\n    case 'o':\n    case 'l':\n      synth.triggerRelease()\n  }\n})\n"]},"metadata":{},"sourceType":"module"}